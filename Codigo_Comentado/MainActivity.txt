package com.sakhura.controlpaseosmascotas

// IMPORTS - Bibliotecas que necesitamos para que funcione la app
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.sakhura.controlpaseosmascotas.datos.BaseDeDatosPaseos
import com.sakhura.controlpaseosmascotas.datos.EntidadPaseoMascota
import com.sakhura.controlpaseosmascotas.modelovista.ModeloVistaPaseos
import com.sakhura.controlpaseosmascotas.repositorio.RepositorioPaseosMascotas
import com.sakhura.controlpaseosmascotas.ui.theme.ControlpaseosmascotasTheme
import java.text.NumberFormat
import java.text.SimpleDateFormat
import java.util.*

// ============================================================================
// CLASE PRINCIPAL - PUNTO DE ENTRADA DE LA APLICACIÓN
// ============================================================================

class MainActivity : ComponentActivity() {
    // 🎯 IMPORTANTE: Esta función se ejecuta cuando se abre la app
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge() // Permite que la app use toda la pantalla
        setContent {
            // 🎨 ControlpaseosmascotasTheme aplica el tema visual (colores, fuentes)
            ControlpaseosmascotasTheme {
                AplicacionPaseosMascotas() // Nuestra aplicación principal
            }
        }
    }
}

// ============================================================================
// PANTALLA PRINCIPAL - ARQUITECTURA Y CONFIGURACIÓN
// ============================================================================

@OptIn(ExperimentalMaterial3Api::class) // Permite usar APIs experimentales
@Composable
fun AplicacionPaseosMascotas() {
    // 🏗️ CONFIGURACIÓN DE ARQUITECTURA (MUY IMPORTANTE)
    // Aquí se conectan todas las capas de la aplicación
    
    val context = LocalContext.current // Contexto de Android (necesario para la DB)
    
    // 💾 Paso 1: Crear/obtener la base de datos
    val baseDeDatos = BaseDeDatosPaseos.obtenerBaseDeDatos(context)
    
    // 📊 Paso 2: Crear el repositorio (organizador de datos)
    val repositorio = RepositorioPaseosMascotas(baseDeDatos.accesoDatosPaseos())
    
    // 🧠 Paso 3: Crear el ViewModel (cerebro de la aplicación)
    val viewModel: ModeloVistaPaseos = viewModel { ModeloVistaPaseos(repositorio) }

    // 🎛️ ESTADO LOCAL DE LA INTERFAZ
    // Este estado controla si se muestra el formulario o la lista
    var mostrandoFormulario by remember { mutableStateOf(false) }
    
    // 📱 SCAFFOLD - ESTRUCTURA PRINCIPAL DE LA PANTALLA
    Scaffold(
        topBar = {
            // 📋 Barra superior con título
            TopAppBar(
                title = { Text("🐕 Control de Paseos") },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                )
            )
        },
        floatingActionButton = {
            // ➕ Botón flotante que cambia entre + y X
            FloatingActionButton(
                onClick = { 
                    // 🔄 Cambia el estado: si está mostrando formulario, lo cierra y viceversa
                    mostrandoFormulario = !mostrandoFormulario 
                }
            ) {
                Icon(
                    // 🎯 LÓGICA CONDICIONAL: Ícono cambia según el estado
                    imageVector = if (mostrandoFormulario) Icons.Default.Close else Icons.Default.Add,
                    contentDescription = if (mostrandoFormulario) "Cerrar" else "Agregar paseo"
                )
            }
        }
    ) { paddingValues ->
        // 📐 LAYOUT PRINCIPAL - Organización vertical
        Column(
            modifier = Modifier
                .fillMaxSize() // Ocupa toda la pantalla
                .padding(paddingValues) // Respeta los espacios del Scaffold
                .padding(16.dp) // Margen interno
        ) {
            // 📊 SIEMPRE mostrar estadísticas
            EstadisticasCard(viewModel)

            Spacer(modifier = Modifier.height(16.dp)) // Espacio entre elementos

            // 🎯 NAVEGACIÓN CONDICIONAL - MUY IMPORTANTE
            if (mostrandoFormulario) {
                // Si el estado es true, muestra el formulario
                FormularioNuevoPaseo(viewModel) {
                    mostrandoFormulario = false // Callback para cerrar el formulario
                }
            } else {
                // Si el estado es false, muestra la lista
                ListaDePaseos(viewModel)
            }
        }
    }
}

// ============================================================================
// TARJETA DE ESTADÍSTICAS - DATOS REACTIVOS
// ============================================================================

@Composable
fun EstadisticasCard(viewModel: ModeloVistaPaseos) {
    // 🔄 REACTIVIDAD - Estos valores se actualizan automáticamente
    // Cada vez que cambian los datos en la base de datos, la UI se redibuja
    val totalGanado by viewModel.totalGanado.collectAsState()
    val totalPendiente by viewModel.totalPendiente.collectAsState()

    // 🎨 CARD - Contenedor con elevación y bordes redondeados
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            // 📋 Título de la sección
            Text(
                text = "📊 Estadísticas",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(8.dp))

            // 📊 LAYOUT HORIZONTAL - Tres columnas de estadísticas
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween // Distribución uniforme
            ) {
                // 💰 COLUMNA 1: Dinero ganado (pagado)
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "💰 Ganado",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    Text(
                        text = formatearDinero(totalGanado), // 🎯 Formatea como moneda chilena
                        style = MaterialTheme.typography.headlineSmall,
                        color = Color(0xFF4CAF50), // Verde (color de éxito)
                        fontWeight = FontWeight.Bold
                    )
                }

                // ⏳ COLUMNA 2: Dinero pendiente
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "⏳ Pendiente",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    Text(
                        text = formatearDinero(totalPendiente),
                        style = MaterialTheme.typography.headlineSmall,
                        color = Color(0xFFFF9800), // Naranja (color de advertencia)
                        fontWeight = FontWeight.Bold
                    )
                }

                // 💵 COLUMNA 3: Total general (ganado + pendiente)
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "💵 Total",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    Text(
                        // 🧮 CÁLCULO EN TIEMPO REAL
                        text = formatearDinero(totalGanado + totalPendiente),
                        style = MaterialTheme.typography.headlineSmall,
                        color = MaterialTheme.colorScheme.primary,
                        fontWeight = FontWeight.Bold
                    )
                }
            }
        }
    }
}

// ============================================================================
// FORMULARIO - MANEJO DE ESTADOS Y VALIDACIONES
// ============================================================================

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FormularioNuevoPaseo(
    viewModel: ModeloVistaPaseos,
    onPaseoAgregado: () -> Unit // 🎯 Callback - función que se ejecuta al guardar
) {
    // 📊 ESTADOS DEL FORMULARIO - Conectados al ViewModel
    // Cada campo del formulario tiene su propio estado
    val nombreMascota by viewModel.nombreMascota.collectAsState()
    val tipoMascota by viewModel.tipoMascota.collectAsState()
    val nombreCliente by viewModel.nombreCliente.collectAsState()
    val duracionHoras by viewModel.duracionHoras.collectAsState()
    val tarifaPorHora by viewModel.tarifaPorHora.collectAsState()
    val notas by viewModel.notas.collectAsState()

    // 🎛️ ESTADO LOCAL para el dropdown
    var expandedTipoMascota by remember { mutableStateOf(false) }
    val tiposMascotas = listOf("Perro", "Gato", "Conejo", "Otro")

    // 📱 CARD CON SCROLL - Importante para formularios largos
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier
                .padding(16.dp)
                .verticalScroll(rememberScrollState()) // 🎯 SCROLL VERTICAL - Para ver todo el formulario
        ) {
            Text(
                text = "➕ Nuevo Paseo",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(16.dp))

            // 🐕 CAMPO 1: Nombre de la mascota
            OutlinedTextField(
                value = nombreMascota, // Lee del ViewModel
                onValueChange = viewModel::actualizarNombreMascota, // 🎯 Actualiza el ViewModel
                label = { Text("🐕 Nombre de la mascota") },
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(8.dp))

            // 🐾 CAMPO 2: Tipo de mascota (DROPDOWN)
            ExposedDropdownMenuBox(
                expanded = expandedTipoMascota,
                onExpandedChange = { expandedTipoMascota = !expandedTipoMascota }
            ) {
                OutlinedTextField(
                    value = tipoMascota,
                    onValueChange = { }, // Vacío porque es readOnly
                    readOnly = true, // 🎯 Solo lectura - no se puede escribir directamente
                    label = { Text("🐾 Tipo de mascota") },
                    trailingIcon = {
                        ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedTipoMascota)
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .menuAnchor() // 🎯 Conecta el campo con el menú
                )

                // 📋 MENÚ DESPLEGABLE
                ExposedDropdownMenu(
                    expanded = expandedTipoMascota,
                    onDismissRequest = { expandedTipoMascota = false }
                ) {
                    // 🔄 LOOP - Crea un item por cada tipo de mascota
                    tiposMascotas.forEach { tipo ->
                        DropdownMenuItem(
                            text = { Text(tipo) },
                            onClick = {
                                viewModel.actualizarTipoMascota(tipo) // Actualiza el ViewModel
                                expandedTipoMascota = false // Cierra el menú
                            }
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(8.dp))

            // 👤 CAMPO 3: Nombre del cliente
            OutlinedTextField(
                value = nombreCliente,
                onValueChange = viewModel::actualizarNombreCliente,
                label = { Text("👤 Nombre del cliente") },
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(8.dp))

            // ⏱️💵 CAMPOS 4 y 5: Duración y tarifa (EN LA MISMA FILA)
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp) // Espacio entre campos
            ) {
                // ⏱️ Duración en horas
                OutlinedTextField(
                    value = duracionHoras,
                    onValueChange = viewModel::actualizarDuracionHoras,
                    label = { Text("⏱️ Horas") },
                    modifier = Modifier.weight(1f) // 🎯 WEIGHT - Ocupa la mitad del espacio
                )

                // 💵 Tarifa por hora
                OutlinedTextField(
                    value = tarifaPorHora,
                    onValueChange = viewModel::actualizarTarifaPorHora,
                    label = { Text("💵 Tarifa/hora") },
                    modifier = Modifier.weight(1f) // 🎯 WEIGHT - Ocupa la otra mitad
                )
            }

            Spacer(modifier = Modifier.height(12.dp))

            // 💰 CÁLCULO AUTOMÁTICO - Solo se muestra si hay datos
            if (duracionHoras.isNotEmpty() && tarifaPorHora.isNotEmpty()) {
                val total = viewModel.calcularMontoTotal() // 🧮 Calcula: horas × tarifa
                Card(
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.primaryContainer
                    )
                ) {
                    Text(
                        text = "💰 Total: ${formatearDinero(total)}",
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(16.dp)
                    )
                }

                Spacer(modifier = Modifier.height(12.dp))
            }

            // 📝 CAMPO 6: Notas adicionales
            OutlinedTextField(
                value = notas,
                onValueChange = viewModel::actualizarNotas,
                label = { Text("📝 Notas (opcional)") },
                placeholder = { Text("Ej: Paseo por el parque, muy activo") },
                modifier = Modifier.fillMaxWidth(),
                minLines = 2, // Mínimo 2 líneas
                maxLines = 4  // Máximo 4 líneas
            )

            Spacer(modifier = Modifier.height(20.dp))

            // 💾 BOTÓN GUARDAR - Con validación
            Button(
                onClick = {
                    viewModel.agregarPaseo() // 🎯 Guarda en la base de datos
                    onPaseoAgregado() // 🎯 Ejecuta el callback (cierra el formulario)
                },
                enabled = viewModel.formularioEsValido(), // 🎯 VALIDACIÓN - Solo activo si es válido
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp), // Altura fija para mejor visibilidad
                colors = ButtonDefaults.buttonColors(
                    containerColor = MaterialTheme.colorScheme.primary
                )
            ) {
                Icon(
                    imageVector = Icons.Default.Check,
                    contentDescription = null,
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = "💾 Guardar Paseo",
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Bold
                )
            }

            // Espaciado adicional al final
            Spacer(modifier = Modifier.height(20.dp))
        }
    }
}

// ============================================================================
// LISTA DE PASEOS - LAZY LOADING Y ESTADOS VACÍOS
// ============================================================================

@Composable
fun ListaDePaseos(viewModel: ModeloVistaPaseos) {
    // 📊 ESTADO REACTIVO - Lista se actualiza automáticamente
    val paseos by viewModel.paseos.collectAsState()

    Text(
        text = "📋 Lista de Paseos",
        style = MaterialTheme.typography.headlineSmall,
        fontWeight = FontWeight.Bold
    )

    Spacer(modifier = Modifier.height(8.dp))

    // 🎯 LÓGICA CONDICIONAL - Muestra mensaje si no hay datos
    if (paseos.isEmpty()) {
        // 📄 ESTADO VACÍO - Mensaje cuando no hay paseos
        Card(
            modifier = Modifier.fillMaxWidth(),
            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(32.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "🐕",
                    style = MaterialTheme.typography.displayLarge
                )
                Text(
                    text = "No hay paseos registrados",
                    style = MaterialTheme.typography.bodyLarge
                )
                Text(
                    text = "¡Agrega tu primer paseo con el botón +!",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    } else {
        // 📜 LISTA CON LAZY LOADING - Eficiente para muchos elementos
        LazyColumn(
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            // 🔄 ITEMS - Crea una tarjeta por cada paseo
            items(paseos) { paseo ->
                TarjetaPaseo(
                    paseo = paseo,
                    // 🎯 CALLBACKS - Funciones que se ejecutan al tocar botones
                    onCambiarEstadoPago = { viewModel.cambiarEstadoPago(paseo) },
                    onEliminar = { viewModel.eliminarPaseo(paseo) }
                )
            }
        }
    }
}

// ============================================================================
// TARJETA DE PASEO - COMPOSABLE COMPLEJO CON MÚLTIPLES ESTADOS
// ============================================================================

@Composable
fun TarjetaPaseo(
    paseo: EntidadPaseoMascota, // 📊 Datos del paseo
    onCambiarEstadoPago: () -> Unit, // 🎯 Función para cambiar estado
    onEliminar: () -> Unit // 🎯 Función para eliminar
) {
    // 🎨 CARD CON COLORES CONDICIONALES
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        colors = CardDefaults.cardColors(
            // 🎯 COLOR DINÁMICO - Verde si está pagado, naranja si está pendiente
            containerColor = if (paseo.estaPagado) {
                Color(0xFFE8F5E8) // Verde claro para paseos pagados
            } else {
                Color(0xFFFFF3E0) // Naranja claro para paseos pendientes
            }
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            // 📊 FILA SUPERIOR - Información principal y estado
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.Top
            ) {
                // 📝 COLUMNA IZQUIERDA - Información del paseo
                Column(
                    modifier = Modifier.weight(1f) // Ocupa el espacio disponible
                ) {
                    // 🐕 Nombre con emoji dinámico
                    Text(
                        text = "${obtenerEmojiTipo(paseo.tipoMascota)} ${paseo.nombreMascota}",
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )

                    // 👤 Nombre del cliente
                    Text(
                        text = "👤 ${paseo.nombreCliente}",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )

                    // 📅 Fecha formateada
                    Text(
                        text = "📅 ${formatearFecha(paseo.fecha)}",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }

                // 🏷️ CHIP DE ESTADO - Botón interactivo
                AssistChip(
                    onClick = onCambiarEstadoPago, // 🎯 Cambia el estado al tocar
                    label = {
                        Text(
                            // 🎯 TEXTO CONDICIONAL
                            text = if (paseo.estaPagado) "✅ Pagado" else "⏳ Pendiente"
                        )
                    },
                    colors = AssistChipDefaults.assistChipColors(
                        // 🎯 COLOR CONDICIONAL
                        containerColor = if (paseo.estaPagado) {
                            Color(0xFF4CAF50) // Verde para pagado
                        } else {
                            Color(0xFFFF9800) // Naranja para pendiente
                        },
                        labelColor = Color.White
                    )
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            // 💰 FILA DE INFORMACIÓN FINANCIERA
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = "⏱️ ${paseo.duracionHoras}h",
                    style = MaterialTheme.typography.bodyMedium
                )
                Text(
                    text = "${formatearDinero(paseo.tarifaPorHora)}/h",
                    style = MaterialTheme.typography.bodyMedium
                )
                Text(
                    text = "💰 ${formatearDinero(paseo.montoTotal)}",
                    style = MaterialTheme.typography.bodyMedium,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary
                )
            }

            // 📝 NOTAS - Solo se muestran si existen
            if (paseo.notas.isNotBlank()) {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "📝 ${paseo.notas}",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            // 🗑️ BOTÓN ELIMINAR
            Spacer(modifier = Modifier.height(8.dp))
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.End
            ) {
                TextButton(
                    onClick = onEliminar, // 🎯 Elimina el paseo al tocar
                    colors = ButtonDefaults.textButtonColors(
                        contentColor = Color(0xFFD32F2F) // Rojo para indicar peligro
                    )
                ) {
                    Icon(
                        imageVector = Icons.Default.Delete,
                        contentDescription = "Eliminar",
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text("Eliminar")
                }
            }
        }
    }
}

// ============================================================================
// FUNCIONES DE UTILIDAD - FORMATEO Y CONVERSIONES
// ============================================================================

// 💰 FORMATEAR DINERO EN PESOS CHILENOS
fun formatearDinero(cantidad: Double): String {
    // 🎯 NumberFormat automáticamente formatea según la configuración chilena
    val formato = NumberFormat.getCurrencyInstance(Locale("es", "CL"))
    return formato.format(cantidad)
    // Ejemplo: 12500.0 → $12.500
}

// 📅 FORMATEAR FECHA EN FORMATO DD/MM/YYYY
fun formatearFecha(fecha: Date): String {
    // 🎯 SimpleDateFormat permite personalizar el formato de fecha
    val formato = SimpleDateFormat("dd/MM/yyyy", Locale("es", "CL"))
    return formato.format(fecha)
    // Ejemplo: Date() → "27/07/2025"
}

// 🐾 OBTENER EMOJI SEGÚN TIPO DE MASCOTA
fun obtenerEmojiTipo(tipo: String): String {
    // 🎯 WHEN EXPRESSION - Similar a switch en otros lenguajes
    return when (tipo) {
        "Perro" -> "🐕"
        "Gato" -> "🐱"
        "Conejo" -> "🐰"
        else -> "🐾" // Valor por defecto para cualquier otro tipo
    }
}

// ============================================================================
// CONCEPTOS CLAVE PARA RECORDAR:
// ============================================================================

/*
🎯 CONCEPTOS MÁS IMPORTANTES:

1. **REACTIVIDAD**: Los datos se actualizan automáticamente
   - collectAsState() conecta la UI con el ViewModel
   - Cuando cambian los datos, la interfaz se redibuja sola

2. **SEPARACIÓN DE RESPONSABILIDADES**:
   - MainActivity: Solo interfaz de usuario
   - ViewModel: Lógica de negocio
   - Repository: Organización de datos
   - Database: Persistencia

3. **ESTADOS EN COMPOSE**:
   - remember: Estado local del Composable
   - collectAsState: Estado que viene del ViewModel
   - mutableStateOf: Estado que puede cambiar

4. **CALLBACKS**: Funciones que se pasan como parámetros
   - onClick: Se ejecuta al tocar un botón
   - onValueChange: Se ejecuta al escribir en un campo
   - onPaseoAgregado: Se ejecuta al guardar un paseo

5. **VALIDACIONES**: 
   - formularioEsValido() verifica que los campos estén completos
   - enabled en Button controla si se puede tocar o no

6. **FORMATEO**: 
   - formatearDinero() convierte números a formato de moneda
   - formatearFecha() convierte Date a texto legible

7. **LÓGICA CONDICIONAL**:
   - if (condición) { A } else { B }
   - when (variable) { caso1 -> resultado1 }

8. **LAZY LOADING**:
   - LazyColumn solo renderiza los elementos visibles
   - Muy eficiente para listas largas

9. **MODIFIERS**:
   - fillMaxWidth(): Ocupa todo el ancho
   - padding(): Agrega márgenes
   - weight(): Distribución proporcional en Row/Column

10. **ARQUITECTURA MVVM**:
    - Model: EntidadPaseoMascota (datos)
    - View: Composables (interfaz)
    - ViewModel: ModeloVistaPaseos (lógica)
*/